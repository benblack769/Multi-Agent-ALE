# This workflow will install Python wheels and publish to PyPI
name: Python package

on:
  push:
    branches: [ production ]

jobs:
  build-manylinux-wheels:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 
      uses: actions/setup-python@v4
      with:
          python-version: '3.10'
    - name: Build manylinux container
      run: docker build -f .github/Dockerfile.build-manylinux . -t ma-ale-manylinux
    - name: Load wheels
      run: docker cp $(docker create --name tc ma-ale-manylinux):/work/dist ./dist
    # inefficient to test all python versions, so just test manylinux wheel for python3.10 locally
    - name: Test wheel on python 3.10
      run: |
          pip install ./dist/*cp310*.whl
          python examples/python-interface/python_example.py  multi_agent_ale_py/tests/fixtures/tetris.bin
    - name: Store wheels
      uses: actions/upload-artifact@v4
      with:
        name: dist-manylinux
        path: dist
  
  build-sdist:
    # build sdist and make sure we can use it at least on linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 
      uses: actions/setup-python@v4
      with:
          python-version: '3.10'
    - name: Build sdist
      run: |
          pip install build
          python -m build . --sdist
    - name: Test sdist
      run: |
          pip install ./dist/*.tar.gz
          python examples/python-interface/python_example.py  multi_agent_ale_py/tests/fixtures/tetris.bin
    - name: Store wheels
      uses: actions/upload-artifact@v4
      with:
        name: dist-sdist
        path: dist

  build-native-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          # macos-13 is x86, macos-14 is M1 ARM
          os: [windows-latest, macos-13, macos-14]
          python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
          python-version: ${{ matrix.python-version }}
    - name: Build wheels
      shell: bash
      run: |
          pip wheel . --no-deps -w dist
    - name: Run integration test on native built wheel
      shell: bash
      run: |
          pip install dist/*.whl
          python examples/python-interface/python_example.py  multi_agent_ale_py/tests/fixtures/tetris.bin
    - name: Store wheels
      uses: actions/upload-artifact@v4
      with:
        name: dist-native-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist

  publish:
    runs-on: ubuntu-latest
    needs:
    - build-manylinux-wheels
    - build-native-wheels
    - build-sdist
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Download dists
      uses: actions/download-artifact@v4
      with:
        pattern: dist-*
        merge-multiple: true
        path: dist
    - name: Publish to pypi
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: ${{ secrets.PYPI_USER }}
        password: ${{ secrets.PYPI_PASSWORD }} 
        # Recommend to upload to PyPI test for the first run
        # repository_url: https://test.pypi.org/legacy/
        skip_existing: true
        verbose: true